@charset "UTF-8";
html,body{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
}
.container{
display: grid;
grid-template-columns: 1fr 1fr 1fr;
grid-template-rows: 1fr 1fr 1fr;
gap: 10px;

background: #000000;
width: 100vw;
height: 100vh;
}
.container>div{/* sobrepor um comando*/
    background: #AB06F4;
}
.item {
    font: normal bolder 1em arial;
    text-align: center;
    }
    a{
        color: #08fb00;
        text-decoration: none;
    }

    /*https://www.youtube.com/watch?v=HN1UjzRSdBk&t=1518s*/ 
    /*
    Grid: Alinhamento
Existem 6 propriedades para alinhamento:

justify-content
align-content
justify-items
align-items
justify-self
align-self
Vamos separá-los em 2 grupos

justify e align
content, items e self
Justify e Align
Sabendo que o grid é bidimensional, nós temos o eixo x e o y.

O eixo x é o posicionamento horizontal, da esquerda para a direita.

O eixo y é o posicionamento vertical, de cima para baixo

Justify trabalhará o eixo x.

Align trabalhará o eixo y.

Content, Items e Self
Juntando o justify, ou align, com esses elementos: content, items e self; nós observamos nossas propriedades

Content
justify-content e align-content nos permite alinhar o próprio grid, relativo ao espaço fora do grid.

O uso dessas propriedades são raras, pois só é aplicado caso o grid seja menor que a area definida. (Por exemplo, quando usamos em px o tamanho do grid, poderemos terminar com um grid pequeno, para o tamanho da area do grid)

Podemos usar 7 valores:

start
end
center
stretch
space-between
space-around
space-evenly
Items
justify-items e align-items vai permitir alinhar os items do nosso grid, em qualquer espaço disponível, na célula que ele habitar.

Podemos usar 4 valores:

start
end
center
stretch
Self
justify-self e align-self vai nos permitir alinhar o item em si.

Faz a mesma coisa que o justify-items e align-items, porém, aplicado diretamente no item de um grid 
*/